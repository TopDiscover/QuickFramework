{"version":3,"sources":["../source/parsePhoneNumberFromString.test.js"],"names":["_parsePhoneNumberFromString","metadata","parsePhoneNumberFromString","parameters","push","apply","USE_NON_GEOGRAPHIC_COUNTRY_CODE","describe","it","nationalNumber","should","equal","expect","to","be","undefined","phoneNumber","number","country","countryCallingCode","defaultCallingCode","isPossible","phoneNumber2","testCorrectness","expectedResult","result","extract","defaultCountry","not"],"mappings":"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","sourcesContent":["import _parsePhoneNumberFromString from './parsePhoneNumberFromString'\r\nimport metadata from '../metadata.min.json'\r\n\r\nfunction parsePhoneNumberFromString(...parameters) {\r\n\tparameters.push(metadata)\r\n\treturn _parsePhoneNumberFromString.apply(this, parameters)\r\n}\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\ndescribe('parsePhoneNumberFromString', () => {\r\n\tit('should parse phone numbers from string', () => {\r\n\t\tparsePhoneNumberFromString('Phone: 8 (800) 555 35 35.', 'RU').nationalNumber.should.equal('8005553535')\r\n\t\texpect(parsePhoneNumberFromString('3', 'RU')).to.be.undefined\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\texpect(parsePhoneNumberFromString('')).to.be.undefined\r\n\t})\r\n\r\n\tit('should parse phone numbers when invalid country code is passed', () => {\r\n\t\tparsePhoneNumberFromString('Phone: +7 (800) 555 35 35.', 'XX').nationalNumber.should.equal('8005553535')\r\n\t\texpect(parsePhoneNumberFromString('Phone: 8 (800) 555-35-35.', 'XX')).to.be.undefined\r\n\t})\r\n\r\n\r\n\tit('should parse non-geographic numbering plan phone numbers (extended)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumberFromString('+870773111632')\r\n\t\tphoneNumber.number.should.equal('+870773111632')\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tphoneNumber.country.should.equal('001')\r\n\t\t} else {\r\n\t\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\t}\r\n\t\tphoneNumber.countryCallingCode.should.equal('870')\r\n\t})\r\n\r\n\tit('should parse non-geographic numbering plan phone numbers (default country code) (extended)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumberFromString('773111632', { defaultCallingCode: '870' })\r\n\t\tphoneNumber.number.should.equal('+870773111632')\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tphoneNumber.country.should.equal('001')\r\n\t\t} else {\r\n\t\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\t}\r\n\t\tphoneNumber.countryCallingCode.should.equal('870')\r\n\t})\r\n\r\n\tit('should determine the possibility of non-geographic phone numbers', () => {\r\n\t\tconst phoneNumber = parsePhoneNumberFromString('+870773111632')\r\n\t\tphoneNumber.isPossible().should.equal(true)\r\n\t\tconst phoneNumber2 = parsePhoneNumberFromString('+8707731116321')\r\n\t\tphoneNumber2.isPossible().should.equal(false)\r\n\t})\r\n\r\n\tit('should support `extract: false` flag', () => {\r\n\t\tconst testCorrectness = (number, expectedResult) => {\r\n\t\t\tconst result = expect(parsePhoneNumberFromString(number, { extract: false, defaultCountry: 'US' }))\r\n\t\t\tif (expectedResult) {\r\n\t\t\t\tresult.to.not.be.undefined\r\n\t\t\t} else {\r\n\t\t\t\tresult.to.be.undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\ttestCorrectness('Call: (213) 373-4253', false)\r\n\t\ttestCorrectness('(213) 373-4253x', false)\r\n\t\ttestCorrectness('(213) 373-4253', true)\r\n\t\ttestCorrectness('- (213) 373-4253 -', true)\r\n\t\ttestCorrectness('+1 (213) 373-4253', true)\r\n\t\ttestCorrectness(' +1 (213) 373-4253', false)\r\n\t})\r\n})\r\n"],"file":"parsePhoneNumberFromString.test.js"}