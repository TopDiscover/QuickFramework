{"version":3,"sources":["../source/findPhoneNumbersInText.test.js"],"names":["findPhoneNumbersInText","metadata","describe","it","number","should","equal","defaultCountry","undefined","NUMBERS","results","i","length","defaultCallingCode"],"mappings":"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","sourcesContent":["import findPhoneNumbersInText from './findPhoneNumbersInText'\r\nimport metadata from '../metadata.min.json'\r\n\r\ndescribe('findPhoneNumbersInText', () => {\r\n\tit('should find phone numbers in text (with default country)', () => {\r\n\t\tfindPhoneNumbersInText('+7 (800) 555-35-35', 'US', metadata)[0].number.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (with default country in options)', () => {\r\n\t\tfindPhoneNumbersInText('+7 (800) 555-35-35', { defaultCountry: 'US' }, metadata)[0].number.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (with default country and options)', () => {\r\n\t\tfindPhoneNumbersInText('+7 (800) 555-35-35', 'US', {}, metadata)[0].number.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (without default country, with options)', () => {\r\n\t\tfindPhoneNumbersInText('+7 (800) 555-35-35', undefined, {}, metadata)[0].number.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (with default country, without options)', () => {\r\n\t\tfindPhoneNumbersInText('+7 (800) 555-35-35', 'US', undefined, metadata)[0].number.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (with empty default country)', () => {\r\n\t\tfindPhoneNumbersInText('+7 (800) 555-35-35', undefined, metadata)[0].number.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text', () => {\r\n\t\tconst NUMBERS = ['+78005553535', '+12133734253']\r\n\t\tconst results = findPhoneNumbersInText('The number is +7 (800) 555-35-35 and not (213) 373-4253 as written in the document.', metadata)\r\n\t\tlet i = 0\r\n\t\twhile (i < results.length) {\r\n\t\t\tresults[i].number.number.should.equal(NUMBERS[i])\r\n\t\t\ti++\r\n\t\t}\r\n\t})\r\n\r\n\tit('should find phone numbers in text (default country calling code)', () => {\r\n\t\tconst NUMBERS = ['+870773111632']\r\n\t\tconst results = findPhoneNumbersInText('The number is 773 111 632', { defaultCallingCode: '870' }, metadata)\r\n\t\tlet i = 0\r\n\t\twhile (i < results.length) {\r\n\t\t\tresults[i].number.number.should.equal(NUMBERS[i])\r\n\t\t\ti++\r\n\t\t}\r\n\t})\r\n})"],"file":"findPhoneNumbersInText.test.js"}