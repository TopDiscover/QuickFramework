{"version":3,"sources":["../source/metadata.test.js"],"names":["metadata","Metadata","validateMetadata","getExtPrefix","isSupportedCountry","describe","it","FR","country","type","should","equal","thrower","getNumberingPlanMetadata","nationalPrefixForParsing","chooseCountryByCountryCallingCode","meta","numberingPlan","formats","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","a","b","countries","country_calling_codes","something"],"mappings":"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","sourcesContent":["import metadata from '../metadata.min.json'\r\n\r\nimport Metadata, { validateMetadata, getExtPrefix, isSupportedCountry } from './metadata'\r\n\r\ndescribe('metadata', () => {\r\n\tit('should return undefined for non-defined types', () => {\r\n\t\tconst FR = new Metadata(metadata).country('FR')\r\n\t\ttype(FR.type('FIXED_LINE')).should.equal('undefined')\r\n\t})\r\n\r\n\tit('should validate country', () => {\r\n\t\tconst thrower = () => new Metadata(metadata).country('RUS')\r\n\t\tthrower.should.throw('Unknown country')\r\n\t})\r\n\r\n\tit('should tell if a country is supported', () => {\r\n\t\tisSupportedCountry('RU', metadata).should.equal(true)\r\n\t\tisSupportedCountry('XX', metadata).should.equal(false)\r\n\t})\r\n\r\n\tit('should return ext prefix for a country', () => {\r\n\t\tgetExtPrefix('US', metadata).should.equal(' ext. ')\r\n\t\tgetExtPrefix('CA', metadata).should.equal(' ext. ')\r\n\t\tgetExtPrefix('GB', metadata).should.equal(' x')\r\n\t\t// expect(getExtPrefix('XX', metadata)).to.equal(undefined)\r\n\t\tgetExtPrefix('XX', metadata).should.equal(' ext. ')\r\n\t})\r\n\r\n\tit('should cover non-occuring edge cases', () => {\r\n\t\tnew Metadata(metadata).getNumberingPlanMetadata('999')\r\n\t})\r\n\r\n\tit('should support deprecated methods', () => {\r\n\t\tnew Metadata(metadata).country('US').nationalPrefixForParsing().should.equal('1')\r\n\t\tnew Metadata(metadata).chooseCountryByCountryCallingCode('1').nationalPrefixForParsing().should.equal('1')\r\n\t})\r\n\r\n\tit('should tell if a national prefix is mandatory when formatting a national number', () => {\r\n\t\tconst meta = new Metadata(metadata)\r\n\t\t// No \"national_prefix_formatting_rule\".\r\n\t\t// \"national_prefix_is_optional_when_formatting\": true\r\n\t\tmeta.country('US')\r\n\t\tmeta.numberingPlan.formats()[0].nationalPrefixIsMandatoryWhenFormattingInNationalFormat().should.equal(false)\r\n\t\t// \"national_prefix_formatting_rule\": \"8 ($1)\"\r\n\t\t// \"national_prefix_is_optional_when_formatting\": true\r\n\t\tmeta.country('RU')\r\n\t\tmeta.numberingPlan.formats()[0].nationalPrefixIsMandatoryWhenFormattingInNationalFormat().should.equal(false)\r\n\t\t// \"national_prefix\": \"0\"\r\n\t\t// \"national_prefix_formatting_rule\": \"0 $1\"\r\n\t\tmeta.country('FR')\r\n\t\tmeta.numberingPlan.formats()[0].nationalPrefixIsMandatoryWhenFormattingInNationalFormat().should.equal(true)\r\n\t})\r\n\r\n\tit('should validate metadata', () => {\r\n\t\tlet thrower = () => validateMetadata()\r\n\t\tthrower.should.throw('`metadata` argument not passed')\r\n\r\n\t\tthrower = () => validateMetadata(123)\r\n\t\tthrower.should.throw('Got a number: 123.')\r\n\r\n\t\tthrower = () => validateMetadata('abc')\r\n\t\tthrower.should.throw('Got a string: abc.')\r\n\r\n\t\tthrower = () => validateMetadata({ a: true, b: 2 })\r\n\t\tthrower.should.throw('Got an object of shape: { a, b }.')\r\n\r\n\t\tthrower = () => validateMetadata({ a: true, countries: 2 })\r\n\t\tthrower.should.throw('Got an object of shape: { a, countries }.')\r\n\r\n\t\tthrower = () => validateMetadata({ country_calling_codes: true, countries: 2 })\r\n\t\tthrower.should.throw('Got an object of shape')\r\n\r\n\t\tthrower = () => validateMetadata({ country_calling_codes: {}, countries: 2 })\r\n\t\tthrower.should.throw('Got an object of shape')\r\n\r\n\t\tvalidateMetadata({ country_calling_codes: {}, countries: {}, b: 3 })\r\n\t})\r\n})\r\n\r\nfunction type(something) {\r\n\treturn typeof something\r\n}"],"file":"metadata.test.js"}