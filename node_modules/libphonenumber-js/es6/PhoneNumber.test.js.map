{"version":3,"sources":["../source/PhoneNumber.test.js"],"names":["metadata","PhoneNumber","describe","it","expect","to","phoneNumber","countryCallingCode","should","equal","country","number","ext","format","formatExtension","extension","isEqual","isNonGeographic"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEAC,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAC7BC,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AACjDC,IAAAA,MAAM,CAAC;AAAA,aAAM,IAAIH,WAAJ,EAAN;AAAA,KAAD,CAAN,CAAgCI,EAAhC,UAAyC,iCAAzC;AACAD,IAAAA,MAAM,CAAC;AAAA,aAAM,IAAIH,WAAJ,CAAgB,GAAhB,CAAN;AAAA,KAAD,CAAN,CAAmCI,EAAnC,UAA4C,6BAA5C;AACAD,IAAAA,MAAM,CAAC;AAAA,aAAM,IAAIH,WAAJ,CAAgB,GAAhB,EAAqB,YAArB,CAAN;AAAA,KAAD,CAAN,CAAiDI,EAAjD,UAA0D,uBAA1D;AACA,GAJC,CAAF;AAMAF,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC/C,QAAMG,WAAW,GAAG,IAAIL,WAAJ,CAAgB,IAAhB,EAAsB,YAAtB,EAAoCD,QAApC,CAApB;AACAM,IAAAA,WAAW,CAACC,kBAAZ,CAA+BC,MAA/B,CAAsCC,KAAtC,CAA4C,GAA5C;AACAH,IAAAA,WAAW,CAACI,OAAZ,CAAoBF,MAApB,CAA2BC,KAA3B,CAAiC,IAAjC;AACAH,IAAAA,WAAW,CAACK,MAAZ,CAAmBH,MAAnB,CAA0BC,KAA1B,CAAgC,cAAhC;AACA,GALC,CAAF;AAOAN,EAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAM;AAC7C,QAAMG,WAAW,GAAG,IAAIL,WAAJ,CAAgB,GAAhB,EAAqB,YAArB,EAAmCD,QAAnC,CAApB;AACAM,IAAAA,WAAW,CAACM,GAAZ,GAAkB,KAAlB;AACAN,IAAAA,WAAW,CAACO,MAAZ,CAAmB,UAAnB,EAA+B;AAC9BC,MAAAA,eAAe,EAAE,yBAACH,MAAD,EAASI,SAAT;AAAA,yBAA0BJ,MAA1B,kCAAyCI,SAAzC;AAAA;AADa,KAA/B,EAGCP,MAHD,CAGQC,KAHR,CAGc,4BAHd;AAIA,GAPC,CAAF;AASAN,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACxC,QAAIF,WAAJ,CAAgB,IAAhB,EAAsB,YAAtB,EAAoCD,QAApC,EAA8CgB,OAA9C,CAAsD,IAAIf,WAAJ,CAAgB,IAAhB,EAAsB,YAAtB,EAAoCD,QAApC,CAAtD,EAAqGQ,MAArG,CAA4GC,KAA5G,CAAkH,IAAlH;AACA,QAAIR,WAAJ,CAAgB,IAAhB,EAAsB,YAAtB,EAAoCD,QAApC,EAA8CgB,OAA9C,CAAsD,IAAIf,WAAJ,CAAgB,GAAhB,EAAqB,YAArB,EAAmCD,QAAnC,CAAtD,EAAoGQ,MAApG,CAA2GC,KAA3G,CAAiH,IAAjH;AACA,QAAIR,WAAJ,CAAgB,IAAhB,EAAsB,YAAtB,EAAoCD,QAApC,EAA8CgB,OAA9C,CAAsD,IAAIf,WAAJ,CAAgB,IAAhB,EAAsB,YAAtB,EAAoCD,QAApC,CAAtD,EAAqGQ,MAArG,CAA4GC,KAA5G,CAAkH,KAAlH;AACA,GAJC,CAAF;AAMAN,EAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AACrD,QAAIF,WAAJ,CAAgB,GAAhB,EAAqB,YAArB,EAAmCD,QAAnC,EAA6CiB,eAA7C,GAA+DT,MAA/D,CAAsEC,KAAtE,CAA4E,KAA5E;AACA,QAAIR,WAAJ,CAAgB,KAAhB,EAAuB,WAAvB,EAAoCD,QAApC,EAA8CiB,eAA9C,GAAgET,MAAhE,CAAuEC,KAAvE,CAA6E,IAA7E;AACA,GAHC,CAAF;AAIA,CAjCO,CAAR","sourcesContent":["import metadata from '../metadata.min'\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\ndescribe('PhoneNumber', () => {\r\n\tit('should validate constructor arguments', () => {\r\n\t\texpect(() => new PhoneNumber()).to.throw('`countryCallingCode` not passed')\r\n\t\texpect(() => new PhoneNumber('7')).to.throw('`nationalNumber` not passed')\r\n\t\texpect(() => new PhoneNumber('7', '8005553535')).to.throw('`metadata` not passed')\r\n\t})\r\n\r\n\tit('should accept country code argument', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('RU', '8005553535', metadata)\r\n\t\tphoneNumber.countryCallingCode.should.equal('7')\r\n\t\tphoneNumber.country.should.equal('RU')\r\n\t\tphoneNumber.number.should.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should format number with options', () => {\r\n\t\tconst phoneNumber = new PhoneNumber('7', '8005553535', metadata)\r\n\t\tphoneNumber.ext = '123'\r\n\t\tphoneNumber.format('NATIONAL', {\r\n\t\t\tformatExtension: (number, extension) => `${number} доб. ${extension}`\r\n\t\t})\r\n\t\t.should.equal('8 (800) 555-35-35 доб. 123')\r\n\t})\r\n\r\n\tit('should compare phone numbers', () => {\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('RU', '8005553535', metadata)).should.equal(true)\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('7', '8005553535', metadata)).should.equal(true)\r\n\t\tnew PhoneNumber('RU', '8005553535', metadata).isEqual(new PhoneNumber('RU', '8005553536', metadata)).should.equal(false)\r\n\t})\r\n\r\n\tit('should tell if a number is non-geographic', () => {\r\n\t\tnew PhoneNumber('7', '8005553535', metadata).isNonGeographic().should.equal(false)\r\n\t\tnew PhoneNumber('870', '773111632', metadata).isNonGeographic().should.equal(true)\r\n\t})\r\n})"],"file":"PhoneNumber.test.js"}