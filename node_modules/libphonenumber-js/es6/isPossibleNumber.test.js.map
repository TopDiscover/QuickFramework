{"version":3,"sources":["../source/isPossibleNumber.test.js"],"names":["metadata","_isPossibleNumber","isPossibleNumber","parameters","push","apply","describe","it","should","equal","phone","country","countryCallingCode","nationalNumber","v2","expect","to"],"mappings":"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","sourcesContent":["import metadata from '../metadata.min.json'\r\nimport _isPossibleNumber from './isPossibleNumber'\r\n\r\nfunction isPossibleNumber(...parameters) {\r\n\tparameters.push(metadata)\r\n\treturn _isPossibleNumber.apply(this, parameters)\r\n}\r\n\r\ndescribe('isPossibleNumber', () => {\r\n\tit('should work', function()\r\n\t{\r\n\t\tisPossibleNumber('+79992223344').should.equal(true)\r\n\r\n\t\tisPossibleNumber({ phone: '1112223344', country: 'RU' }).should.equal(true)\r\n\t\tisPossibleNumber({ phone: '111222334', country: 'RU' }).should.equal(false)\r\n\t\tisPossibleNumber({ phone: '11122233445', country: 'RU' }).should.equal(false)\r\n\r\n\t\tisPossibleNumber({ phone: '1112223344', countryCallingCode: 7 }).should.equal(true)\r\n\t})\r\n\r\n\tit('should work v2', () => {\r\n\t\tisPossibleNumber({ nationalNumber: '111222334', countryCallingCode: 7 }, { v2: true }).should.equal(false)\r\n\t\tisPossibleNumber({ nationalNumber: '1112223344', countryCallingCode: 7 }, { v2: true }).should.equal(true)\r\n\t\tisPossibleNumber({ nationalNumber: '11122233445', countryCallingCode: 7 }, { v2: true }).should.equal(false)\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\t// Invalid `PhoneNumber` argument.\r\n\t\texpect(() => isPossibleNumber({}, { v2: true })).to.throw('Invalid phone number object passed')\r\n\r\n\t\t// Empty input is passed.\r\n\t\t// This is just to support `isValidNumber({})`\r\n\t\t// for cases when `parseNumber()` returns `{}`.\r\n\t\tisPossibleNumber({}).should.equal(false)\r\n\t\texpect(() => isPossibleNumber({ phone: '1112223344' })).to.throw('Invalid phone number object passed')\r\n\r\n\t\t// Incorrect country.\r\n\t\texpect(() => isPossibleNumber({ phone: '1112223344', country: 'XX' })).to.throw('Unknown country')\r\n\t})\r\n})"],"file":"isPossibleNumber.test.js"}