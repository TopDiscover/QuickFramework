{"version":3,"sources":["../source/isPossibleNumber.js"],"names":["normalizeArguments","_isPossibleNumber","isPossibleNumber","arguments","input","options","metadata"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA;;;;;;;;;;;;;;;AAcA,eAAe,SAASC,gBAAT,GACf;AAAA,4BACsCF,kBAAkB,CAACG,SAAD,CADxD;AAAA,MACSC,KADT,uBACSA,KADT;AAAA,MACgBC,OADhB,uBACgBA,OADhB;AAAA,MACyBC,QADzB,uBACyBA,QADzB;;AAEC,SAAOL,iBAAiB,CAACG,KAAD,EAAQC,OAAR,EAAiBC,QAAjB,CAAxB;AACA","sourcesContent":["import { normalizeArguments } from './getNumberType'\r\nimport _isPossibleNumber from './isPossibleNumber_'\r\n\r\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isPossibleNumber()\r\n{\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\treturn _isPossibleNumber(input, options, metadata)\r\n}"],"file":"isPossibleNumber.js"}