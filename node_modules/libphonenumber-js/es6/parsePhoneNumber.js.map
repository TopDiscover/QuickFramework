{"version":3,"sources":["../source/parsePhoneNumber.js"],"names":["parsePhoneNumber_","parsePhoneNumber","normalizeArguments","arguments","text","options","metadata","args","Array","prototype","slice","call","arg_1","arg_2","arg_3","arg_4","TypeError","undefined","defaultCountry","isObject","Error","_"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA,4BACNC,kBAAkB,CAACC,SAAD,CADZ;AAAA,MAClCC,IADkC,uBAClCA,IADkC;AAAA,MAC5BC,OAD4B,uBAC5BA,OAD4B;AAAA,MACnBC,QADmB,uBACnBA,QADmB;;AAE1C,SAAON,iBAAiB,CAACI,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,CAAxB;AACA;AAED,OAAO,SAASJ,kBAAT,CAA4BK,IAA5B,EACP;AAAA,8BACsCC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,IAA3B,CADtC;AAAA;AAAA,MACQK,KADR;AAAA,MACeC,KADf;AAAA,MACsBC,KADtB;AAAA,MAC6BC,KAD7B;;AAGC,MAAIX,IAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,QAAJ,CALD,CAOC;AACA;;AACA,MAAI,OAAOM,KAAP,KAAiB,QAArB,EAA+B;AAC9BR,IAAAA,IAAI,GAAGQ,KAAP;AACA,GAFD,MAGK,MAAM,IAAII,SAAJ,CAAc,sCAAd,CAAN,CAZN,CAcC;AACA;;;AACA,MAAI,CAACH,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EACA;AACC,QAAIE,KAAJ,EAAW;AACVV,MAAAA,OAAO,GAAGS,KAAV;AACAR,MAAAA,QAAQ,GAAGS,KAAX;AACA,KAHD,MAGO;AACNV,MAAAA,OAAO,GAAGY,SAAV;AACAX,MAAAA,QAAQ,GAAGQ,KAAX;AACA;;AAED,QAAID,KAAJ,EAAW;AACVR,MAAAA,OAAO;AAAKa,QAAAA,cAAc,EAAEL;AAArB,SAA+BR,OAA/B,CAAP;AACA;AACD,GAbD,CAcA;AACA;AAfA,OAgBK,IAAIc,QAAQ,CAACN,KAAD,CAAZ,EACL;AACC,UAAIC,KAAJ,EAAW;AACVT,QAAAA,OAAO,GAAIQ,KAAX;AACAP,QAAAA,QAAQ,GAAGQ,KAAX;AACA,OAHD,MAGO;AACNR,QAAAA,QAAQ,GAAGO,KAAX;AACA;AACD,KARI,MASA,MAAM,IAAIO,KAAJ,oCAAsCP,KAAtC,EAAN;;AAEL,SAAO;AACNT,IAAAA,IAAI,EAAJA,IADM;AAENC,IAAAA,OAAO,EAAPA,OAFM;AAGNC,IAAAA,QAAQ,EAARA;AAHM,GAAP;AAKA,C,CAED;;AACA;;AACA,IAAMa,QAAQ,GAAG,SAAXA,QAAW,CAAAE,CAAC;AAAA,SAAI,QAAOA,CAAP,MAAa,QAAjB;AAAA,CAAlB","sourcesContent":["import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'"],"file":"parsePhoneNumber.js"}