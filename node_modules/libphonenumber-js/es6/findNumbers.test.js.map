{"version":3,"sources":["../source/findNumbers.test.js"],"names":["findNumbers","metadata","describe","it","should","deep","equal","phone","country","startsAt","endsAt","leniency","ext","phoneNumbers","v2","length","number","nationalNumber","countryCallingCode","thrower","numbers","defaultCountry","possibleNumbers","extended"],"mappings":"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","sourcesContent":["import findNumbers from './findNumbers'\r\nimport metadata from '../metadata.full.json'\r\n\r\ndescribe('findNumbers', () => {\r\n\tit('should find numbers', () => {\r\n\t\tfindNumbers('2133734253', 'US', metadata).should.deep.equal([{\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 10\r\n\t\t}])\r\n\r\n\t\tfindNumbers('(213) 373-4253', 'US', metadata).should.deep.equal([{\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 14\r\n\t\t}])\r\n\r\n\t\tfindNumbers('The number is +7 (800) 555-35-35 and not (213) 373-4253 as written in the document.', 'US', metadata).should.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}, {\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 41,\r\n\t\t\tendsAt   : 55\r\n\t\t}])\r\n\r\n\t\t// Opening parenthesis issue.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\tfindNumbers('The number is +7 (800) 555-35-35 and not (213) 373-4253 (that\\'s not even in the same country!) as written in the document.', 'US', metadata).should.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}, {\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 41,\r\n\t\t\tendsAt   : 55\r\n\t\t}])\r\n\r\n\t\t// No default country.\r\n\t\tfindNumbers('The number is +7 (800) 555-35-35 as written in the document.', metadata).should.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Passing `options` and default country.\r\n\t\tfindNumbers('The number is +7 (800) 555-35-35 as written in the document.', 'US', { leniency: 'VALID' }, metadata).should.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Passing `options`.\r\n\t\tfindNumbers('The number is +7 (800) 555-35-35 as written in the document.', { leniency: 'VALID' }, metadata).should.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Not a phone number and a phone number.\r\n\t\tfindNumbers('Digits 12 are not a number, but +7 (800) 555-35-35 is.', { leniency: 'VALID' }, metadata).should.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 32,\r\n\t\t\tendsAt   : 50\r\n\t\t}])\r\n\r\n\t\t// Phone number extension.\r\n\t\tfindNumbers('Date 02/17/2018 is not a number, but +7 (800) 555-35-35 ext. 123 is.', { leniency: 'VALID' }, metadata).should.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\text      : '123',\r\n\t\t\tstartsAt : 37,\r\n\t\t\tendsAt   : 64\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should find numbers (v2)', () => {\r\n\t\tconst phoneNumbers = findNumbers('The number is +7 (800) 555-35-35 ext. 1234 and not (213) 373-4253 as written in the document.', 'US', { v2: true }, metadata)\r\n\r\n\t\tphoneNumbers.length.should.equal(2)\r\n\r\n\t\tphoneNumbers[0].startsAt.should.equal(14)\r\n\t\tphoneNumbers[0].endsAt.should.equal(42)\r\n\r\n\t\tphoneNumbers[0].number.number.should.equal('+78005553535')\r\n\t\tphoneNumbers[0].number.nationalNumber.should.equal('8005553535')\r\n\t\tphoneNumbers[0].number.country.should.equal('RU')\r\n\t\tphoneNumbers[0].number.countryCallingCode.should.equal('7')\r\n\t\tphoneNumbers[0].number.ext.should.equal('1234')\r\n\r\n\t\tphoneNumbers[1].startsAt.should.equal(51)\r\n\t\tphoneNumbers[1].endsAt.should.equal(65)\r\n\r\n\t\tphoneNumbers[1].number.number.should.equal('+12133734253')\r\n\t\tphoneNumbers[1].number.nationalNumber.should.equal('2133734253')\r\n\t\tphoneNumbers[1].number.country.should.equal('US')\r\n\t\tphoneNumbers[1].number.countryCallingCode.should.equal('1')\r\n\t})\r\n\r\n\tit('shouldn\\'t find non-valid numbers', () => {\r\n\t\t// Not a valid phone number for US.\r\n\t\tfindNumbers('1111111111', 'US', metadata).should.deep.equal([])\r\n\t})\r\n\r\n\tit('should find non-European digits', () => {\r\n\t\t// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n\t\tfindNumbers('العَرَبِيَّة‎ +٤٤٣٣٣٣٣٣٣٣٣٣عَرَبِيّ‎', metadata).should.deep.equal([{\r\n\t\t\tcountry  : 'GB',\r\n\t\t\tphone    : '3333333333',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 27\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\tlet thrower\r\n\r\n\t\t// No input\r\n\t\tfindNumbers('', metadata).should.deep.equal([])\r\n\r\n\t\t// // No country metadata for this `require` country code\r\n\t\t// thrower = () => findNumbers('123', 'ZZ', metadata)\r\n\t\t// thrower.should.throw('Unknown country')\r\n\r\n\t\t// Numerical `value`\r\n\t\tthrower = () => findNumbers(2141111111, 'US')\r\n\t\tthrower.should.throw('A text for parsing must be a string.')\r\n\r\n\t\t// // No metadata\r\n\t\t// thrower = () => findNumbers('')\r\n\t\t// thrower.should.throw('`metadata` argument not passed')\r\n\r\n\t\t// No metadata, no default country, no phone numbers.\r\n\t\tfindNumbers('').should.deep.equal([])\r\n\t})\r\n\r\n\tit('should find international numbers when passed a non-existent default country', () => {\r\n\t\tconst numbers = findNumbers('Phone: +7 (800) 555 35 35. National: 8 (800) 555-55-55', { defaultCountry: 'XX', v2: true }, metadata)\r\n\t\tnumbers.length.should.equal(1)\r\n\t\tnumbers[0].number.nationalNumber.should.equal('8005553535')\r\n\t})\r\n\r\n\tit('shouldn\\'t find phone numbers which are not phone numbers', () => {\r\n\t\t// A timestamp.\r\n\t\tfindNumbers('2012-01-02 08:00', 'US', metadata).should.deep.equal([])\r\n\r\n\t\t// A valid number (not a complete timestamp).\r\n\t\tfindNumbers('2012-01-02 08', 'US', metadata).should.deep.equal([{\r\n\t\t\tcountry  : 'US',\r\n\t\t\tphone    : '2012010208',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 13\r\n\t\t}])\r\n\r\n\t\t// Invalid parens.\r\n\t\tfindNumbers('213(3734253', 'US', metadata).should.deep.equal([])\r\n\r\n\t\t// Letters after phone number.\r\n\t\tfindNumbers('2133734253a', 'US', metadata).should.deep.equal([])\r\n\r\n\t\t// Valid phone (same as the one found in the UUID below).\r\n\t\tfindNumbers('The phone number is 231354125.', 'FR', metadata).should.deep.equal([{\r\n\t\t\tcountry  : 'FR',\r\n\t\t\tphone    : '231354125',\r\n\t\t\tstartsAt : 20,\r\n\t\t\tendsAt   : 29\r\n\t\t}])\r\n\r\n\t\t// Not a phone number (part of a UUID).\r\n\t\t// Should parse in `{ extended: true }` mode.\r\n\t\tconst possibleNumbers = findNumbers('The UUID is CA801c26f98cd16e231354125ad046e40b.', 'FR', { extended: true }, metadata)\r\n\t\tpossibleNumbers.length.should.equal(1)\r\n\t\tpossibleNumbers[0].country.should.equal('FR')\r\n\t\tpossibleNumbers[0].phone.should.equal('231354125')\r\n\r\n\t\t// Not a phone number (part of a UUID).\r\n\t\t// Shouldn't parse by default.\r\n\t\tfindNumbers('The UUID is CA801c26f98cd16e231354125ad046e40b.', 'FR', metadata).should.deep.equal([])\r\n\t})\r\n\r\n\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/merge_requests/4\r\n\tit('should return correct `startsAt` and `endsAt` when matching \"inner\" candidates in a could-be-a-candidate substring', () => {\r\n\t\tfindNumbers('39945926 77200596 16533084', 'ID', metadata)\r\n\t\t\t.should\r\n\t\t\t.deep\r\n\t\t\t.equal([{\r\n\t\t\t\tcountry: 'ID',\r\n\t\t\t\tphone: '77200596',\r\n\t\t\t\tstartsAt: 9,\r\n\t\t\t\tendsAt: 17\r\n\t\t\t}])\r\n\t})\r\n})"],"file":"findNumbers.test.js"}