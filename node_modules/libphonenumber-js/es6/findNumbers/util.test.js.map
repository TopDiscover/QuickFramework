{"version":3,"sources":["../../source/findNumbers/util.test.js"],"names":["limit","trimAfterFirstMatch","startsWith","endsWith","describe","it","thrower","should","equal"],"mappings":"AAAA,SAECA,KAFD,EAGCC,mBAHD,EAICC,UAJD,EAKCC,QALD,QAOK,QAPL;AASAC,QAAQ,CAAC,kBAAD,EAAqB,YAC7B;AACCC,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YACnC;AACC,QAAIC,OAAO,GAAG;AAAA,aAAMN,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAX;AAAA,KAAd;;AACAM,IAAAA,OAAO,CAACC,MAAR;;AAEAD,IAAAA,OAAO,GAAG;AAAA,aAAMN,KAAK,CAAC,CAAC,CAAF,EAAK,CAAL,CAAX;AAAA,KAAV;;AACAM,IAAAA,OAAO,CAACC,MAAR;;AAEAD,IAAAA,OAAO,GAAG;AAAA,aAAMN,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAX;AAAA,KAAV;;AACAM,IAAAA,OAAO,CAACC,MAAR;AACA,GAVC,CAAF;AAYAF,EAAAA,EAAE,CAAC,4BAAD,EAA+B,YACjC;AACCJ,IAAAA,mBAAmB,CAAC,IAAD,EAAO,QAAP,CAAnB,CAAoCM,MAApC,CAA2CC,KAA3C,CAAiD,KAAjD;AACAP,IAAAA,mBAAmB,CAAC,IAAD,EAAO,KAAP,CAAnB,CAAiCM,MAAjC,CAAwCC,KAAxC,CAA8C,KAA9C;AACA,GAJC,CAAF;AAMAH,EAAAA,EAAE,CAAC,sDAAD,EAAyD,YAC3D;AACCH,IAAAA,UAAU,CAAC,OAAD,EAAU,IAAV,CAAV,CAA0BK,MAA1B,CAAiCC,KAAjC,CAAuC,IAAvC;AACAN,IAAAA,UAAU,CAAC,KAAD,EAAQ,IAAR,CAAV,CAAwBK,MAAxB,CAA+BC,KAA/B,CAAqC,KAArC;AACA,GAJC,CAAF;AAMAH,EAAAA,EAAE,CAAC,oDAAD,EAAuD,YACzD;AACCF,IAAAA,QAAQ,CAAC,OAAD,EAAU,IAAV,CAAR,CAAwBI,MAAxB,CAA+BC,KAA/B,CAAqC,IAArC;AACAL,IAAAA,QAAQ,CAAC,KAAD,EAAQ,IAAR,CAAR,CAAsBI,MAAtB,CAA6BC,KAA7B,CAAmC,KAAnC;AACA,GAJC,CAAF;AAKA,CA/BO,CAAR","sourcesContent":["import\r\n{\r\n\tlimit,\r\n\ttrimAfterFirstMatch,\r\n\tstartsWith,\r\n\tendsWith\r\n}\r\nfrom './util'\r\n\r\ndescribe('findNumbers/util', () =>\r\n{\r\n\tit('should generate regexp limit', () =>\r\n\t{\r\n\t\tlet thrower = () => limit(1, 0)\r\n\t\tthrower.should.throw()\r\n\r\n\t\tthrower = () => limit(-1, 1)\r\n\t\tthrower.should.throw()\r\n\r\n\t\tthrower = () => limit(0, 0)\r\n\t\tthrower.should.throw()\r\n\t})\r\n\r\n\tit('should trimAfterFirstMatch', () =>\r\n\t{\r\n\t\ttrimAfterFirstMatch(/\\d/, 'abc123').should.equal('abc')\r\n\t\ttrimAfterFirstMatch(/\\d/, 'abc').should.equal('abc')\r\n\t})\r\n\r\n\tit('should determine if a string starts with a substring', () =>\r\n\t{\r\n\t\tstartsWith('𐍈123', '𐍈').should.equal(true)\r\n\t\tstartsWith('1𐍈', '𐍈').should.equal(false)\r\n\t})\r\n\r\n\tit('should determine if a string ends with a substring', () =>\r\n\t{\r\n\t\tendsWith('123𐍈', '𐍈').should.equal(true)\r\n\t\tendsWith('𐍈1', '𐍈').should.equal(false)\r\n\t})\r\n})"],"file":"util.test.js"}