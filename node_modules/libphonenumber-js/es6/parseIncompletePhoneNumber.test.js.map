{"version":3,"sources":["../source/parseIncompletePhoneNumber.test.js"],"names":["parseIncompletePhoneNumber","parsePhoneNumberCharacter","describe","it","should","equal","expect","to","be","undefined"],"mappings":"AAAA,OAAOA,0BAAP,IAAqCC,yBAArC,QAAsE,8BAAtE;AAEAC,QAAQ,CAAC,4BAAD,EAA+B,YAAM;AAC5CC,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC/C;AACAF,IAAAA,yBAAyB,CAAC,GAAD,CAAzB,CAA+BG,MAA/B,CAAsCC,KAAtC,CAA4C,GAA5C,EAF+C,CAI/C;;AACAC,IAAAA,MAAM,CAACL,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAA1B,CAAN,CAA4CM,EAA5C,CAA+CC,EAA/C,CAAkDC,SAAlD,CAL+C,CAO/C;;AACAR,IAAAA,yBAAyB,CAAC,GAAD,CAAzB,CAA+BG,MAA/B,CAAsCC,KAAtC,CAA4C,GAA5C,EAR+C,CAU/C;;AACAJ,IAAAA,yBAAyB,CAAC,GAAD,CAAzB,CAA+BG,MAA/B,CAAsCC,KAAtC,CAA4C,GAA5C,EAX+C,CAa/C;;AACAC,IAAAA,MAAM,CAACL,yBAAyB,CAAC,GAAD,CAA1B,CAAN,CAAuCM,EAAvC,CAA0CC,EAA1C,CAA6CC,SAA7C;AACA,GAfC,CAAF;AAiBAN,EAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAChDH,IAAAA,0BAA0B,CAAC,EAAD,CAA1B,CAA+BI,MAA/B,CAAsCC,KAAtC,CAA4C,EAA5C,EADgD,CAGhD;;AACAL,IAAAA,0BAA0B,CAAC,IAAD,CAA1B,CAAiCI,MAAjC,CAAwCC,KAAxC,CAA8C,GAA9C,EAJgD,CAMhD;;AACAL,IAAAA,0BAA0B,CAAC,YAAD,CAA1B,CAAyCI,MAAzC,CAAgDC,KAAhD,CAAsD,UAAtD,EAPgD,CAShD;;AACAL,IAAAA,0BAA0B,CAAC,aAAD,CAA1B,CAA0CI,MAA1C,CAAiDC,KAAjD,CAAuD,SAAvD,EAVgD,CAYhD;;AACAL,IAAAA,0BAA0B,CAAC,YAAD,CAA1B,CAAyCI,MAAzC,CAAgDC,KAAhD,CAAsD,YAAtD;AACA,GAdC,CAAF;AAeA,CAjCO,CAAR","sourcesContent":["import parseIncompletePhoneNumber, { parsePhoneNumberCharacter } from './parseIncompletePhoneNumber'\r\n\r\ndescribe('parseIncompletePhoneNumber', () => {\r\n\tit('should parse phone number character', () => {\r\n\t\t// Accepts leading `+`.\r\n\t\tparsePhoneNumberCharacter('+').should.equal('+')\r\n\r\n\t\t// Doesn't accept non-leading `+`.\r\n\t\texpect(parsePhoneNumberCharacter('+', '+')).to.be.undefined\r\n\r\n\t\t// Parses digits.\r\n\t\tparsePhoneNumberCharacter('1').should.equal('1')\r\n\r\n\t\t// Parses non-European digits.\r\n\t\tparsePhoneNumberCharacter('٤').should.equal('4')\r\n\r\n\t\t// Dismisses other characters.\r\n\t\texpect(parsePhoneNumberCharacter('-')).to.be.undefined\r\n\t})\r\n\r\n\tit('should parse incomplete phone number', () => {\r\n\t\tparseIncompletePhoneNumber('').should.equal('')\r\n\r\n\t\t// Doesn't accept non-leading `+`.\r\n\t\tparseIncompletePhoneNumber('++').should.equal('+')\r\n\r\n\t\t// Accepts leading `+`.\r\n\t\tparseIncompletePhoneNumber('+7 800 555').should.equal('+7800555')\r\n\r\n\t\t// Parses digits.\r\n\t\tparseIncompletePhoneNumber('8 (800) 555').should.equal('8800555')\r\n\r\n\t\t// Parses non-European digits.\r\n\t\tparseIncompletePhoneNumber('+٤٤٢٣٢٣٢٣٤').should.equal('+442323234')\r\n\t})\r\n})"],"file":"parseIncompletePhoneNumber.test.js"}