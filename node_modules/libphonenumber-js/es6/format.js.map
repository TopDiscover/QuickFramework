{"version":3,"sources":["../source/format.js"],"names":["_formatNumber","parse","formatNumber","normalizeArguments","arguments","input","format","options","metadata","args","Array","prototype","slice","call","arg_1","arg_2","arg_3","arg_4","arg_5","defaultCountry","extended","Error","is_object","TypeError","_"],"mappings":"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","sourcesContent":["import _formatNumber from './format_'\r\nimport parse from './parse_'\r\n\r\nexport default function formatNumber()\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= normalizeArguments(arguments)\r\n\r\n\treturn _formatNumber(input, format, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nfunction normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4, arg_5] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet format\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput  = arg_1\r\n\t\tformat = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\t// Legacy lowercase formats.\r\n\tif (format === 'International') {\r\n\t\tformat = 'INTERNATIONAL'\r\n\t} else if (format === 'National') {\r\n\t\tformat = 'NATIONAL'\r\n\t}\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'"],"file":"format.js"}