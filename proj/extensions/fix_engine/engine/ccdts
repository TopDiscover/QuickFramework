
/**@description 引擎扩展声明开始 */

export interface Node {
    /**@description 用户自定义数据 */
    userData: any;
    zIndex: number;
}

export type BUNDLE_TYPE = string | AssetManager.Bundle;

export interface Sprite {
    /**
     * @description 从网络加载图片，推荐使用第二种方式
     * @param config.url 网络地址，如 : http://tools.itharbors.com/res/logo.png
     * @param config.view 继承UIView的子类
     * @param config.complete 加载完成回调
     * @param config.defaultSpriteFrame 加载图片失败后，使用的默认图片,当传入string时，会动态加载该默认图片
     * @param config.defaultBundle 若指定了defaultSpriteFrame，不指定defaultBundle ,优先使用view.bundle,否则则为resources目录
     * @param config.isNeedCache 是否需要缓存到本地,如果不需要，每次都会从网络拉取资源,默认都会缓存到本地
     * @param config.retain 远程加载的资源是否驻留在内存中,默认都不驻留内存
     * @example
     * 示例1：
     * let sprite = imageNode.getComponent(cc.Sprite);
     * sprite.loadRemoteImage({url :"http://tools.itharbors.com/res/logo.png", defaultSpriteFrame : HALL("avatar_default_0.png"), view : this,complete : (data)=>{
     * 		if ( data ) { do something }
     * }});
     * 
     * 示例2:
     * let sprite = imageNode.getComponent(cc.Sprite);
     * sprite.loadRemoteImage({url :"http://tools.itharbors.com/res/logo.png", defaultSpriteFrame : HALL("avatar_default_0.png"), view : this});
     * 
     * 示例3：
     * let sprite = imageNode.getComponent(cc.Sprite);
     * sprite.loadRemoteImage({url :"http://tools.itharbors.com/res/logo.png", view : this});
     * }
     */
    loadRemoteImage(config: {
        url: string,
        view: any,
        complete?: (data: SpriteFrame) => void,
        defaultSpriteFrame?: string,
        defaultBundle?: BUNDLE_TYPE,
        isNeedCache?: boolean,
        retain?: boolean
    }): void;

    /**
     * @description 加载本地图片
     * @param config.url 图片路径 {urls:string[],key:string} urls 为纹理名如果有此纹理会打包成多张，此时需要传入所有纹理的地址，key指纹理中名字
     * @param config.view 所属视图，UIView的子类
     * @param config.complete 完成回调
     * @param config.bundle 可不填，默认为打开UIView时指向的Bundle
     * @example
     * 示例1：
     * sprite.getComponent(cc.Sprite).loadImage({url:{urls:["plist/fish_30","plist/fish_30_1","plist/fish_30_2"],key:"fishMove_030_28"},view:this});
     * 示例2：
     * sprite.getComponent(cc.Sprite).loadImage({url:"hall/a",view:this});
     */
    loadImage(config: {
        url: string | { urls: string[], key: string },
        view: any,
        complete?: (data: SpriteFrame) => void,
        bundle?: BUNDLE_TYPE
    }): void;
}

export interface Button {
    /**
     * @description 加载按钮
     * @param config.bundle 可不填，默认为打开UIView时指向的Bundle
     * @example
     * 示例1：
     * let button = cc.find("button",this.node);
     * button.getComponent(cc.Button).loadButton({normalSprite : "hall/a",view:this});
     * button.getComponent(cc.Button).loadButton({normalSprite : "hall/b",pressedSprite : "hall/c",view:this});
     * 示例2：
     * button.getComponent(cc.Button).loadButton({view:this,
     *	normalSprite:{urls:["gameComm/chipsetting/chipInfo"],key:"chip0_1"},
     *	pressedSprite:{urls:["gameComm/chipsetting/chipInfo"],key:"chip0_2"},
     *	hoverSprite : {urls:["gameComm/chipsetting/chipInfo"],key:"chip1_1"},
     *	disabledSprite : {urls:["gameComm/chipsetting/chipInfo"],key:"chip1_2"},
     * }); 
     * complete.type => ButtonSpriteFrameType
     */
    loadButton(config: {
        normalSprite?: string | { urls: string[], key: string },
        view: any,//UIView的子类
        pressedSprite?: string | { urls: string[], key: string },
        hoverSprite?: string | { urls: string[], key: string },
        disabledSprite?: string | { urls: string[], key: string },
        complete?: (type: string, spriteFrame: SpriteFrame) => void,
        bundle?: BUNDLE_TYPE
    }): void;
}

export interface Label {
    /**
      * @description 加载字体
      * @param config.bundle 可不填，默认为打开UIView时指向的Bundle
      * @example
      * let content = cc.find("content",this.node); 
      * content.getComponent(cc.Label).loadFont({font:"font/DFYUANW7-GB2312",view:this});
      */
    loadFont(config: {
        font: string,
        view: any,
        complete?: (font: Font) => void,
        bundle?: BUNDLE_TYPE
    }): void;

    /**@description 强制label在当前帧进行绘制 */
    forceDoLayout(): void;
}

export interface ParticleSystem2D {

    /**
         * @description 加载特效文件 view 为null时，加载之前不会释
     * @param config.bundle 可不填，默认为打开UIView时指向的Bundle
     * @example
     * let node = new cc.Node();
     * let par = node.addComponent(cc.ParticleSystem);
     * par.loadFile({url:GAME_RES( "res/action/DDZ_win_lizi" ),view:null});
     * this.node.addChild(node);
     */
    loadFile(config: {
        url: string,
        view: any,
        complete?: (file: ParticleAsset) => void,
        bundle?: BUNDLE_TYPE
    }): void;

}

export namespace sp {
    export interface Skeleton {
        /**
          * @description 扩展方法
          * @param remotePath 远程资源路径
          * @param name 远程Spine文件名，不再后缀
          * @param complete 完成回调
         * @param isNeedCache 是否需要缓存到本地,如果不需要，每次都会从网络拉取资源,默认都会缓存到本地
         * @param config.retain 远程加载的资源是否驻留在内存中,默认都不驻留内存
          * @example
          * var skeleton = node.addComponent(sp.Skeleton);
         *
         * let path = "https://bc-test1.oss-cn-shenzhen.aliyuncs.com/image/action";
         * let name = "nnoh_v4";
         * skeleton.loadRemoteSkeleton({view : this , path : path, name : name, complete : (data:sp.SkeletonData)=>{
         *    if (data) {
         *        skeleton.animation = 'loop';
         *        skeleton.premultipliedAlpha = false;
         *    }
         * }});
         */
        loadRemoteSkeleton(config: {
            view: any,
            path: string,
            name: string,
            complete: (data: sp.SkeletonData) => void,
            isNeedCache?: boolean,
            retain?: boolean
        }): void;

        /**
         * @description 加载动画
         * @param config.bundle 可不填，默认为打开UIView时指向的Bundle
         * @example
         * action.loadSkeleton({url:"hall/vip/vipAction/vip_10",view:this,complete:(data)=>{
         *	if ( data ){
         *		action.animation = "loop";
         *		action.loop = true;
         *		action.premultipliedAlpha = false;
         *	}
         * }});
         */
        loadSkeleton(config: {
            url: string,
            view: any,
            complete: (data: sp.SkeletonData) => void,
            bundle?: BUNDLE_TYPE
        }): void;
    }
}

export namespace dragonBones{
	export interface ArmatureDisplay{
		/**
		 * @description 加载龙骨动画
		 * @param config 可不填，默认为打开UIView时指向的Bundle
		 * @example 
		 * ani.loadDisplay({
         *   assetUrl : "dragonBones/NewDragonTest",
         *   atlasUrl : "dragonBones/texture",
         *   view : this,
         *   complete :(asset,atlas)=>{
         *       if ( asset && atlas ){
         *           ani.armatureName = "armatureName";
         *           ani.setAnimationCacheMode(dragonBones.ArmatureDisplay.AnimationCacheMode.REALTIME);
         *           ani.timeScale = 1;
         *           ani.playTimes = 0;
         *           ani.playAnimation("stand", 0);
         *       }
         *   }
         * })
		 **/
		loadDisplay(config:{ assetUrl : string , atlasUrl : string , view : UIView , complete : (asset : DragonBonesAsset | null , atlas : DragonBonesAtlasAsset | null)=>void,bundle?:BUNDLE_TYPE}):void;
	}
}

/**@description 引擎扩展声明结束 */
    /**
     * @en
     * Predefined constants, see [[Macro]] for detailed contents.
     * @zh
     * 预定义常量，具体内容参考 [[Macro]] 文档。
     */
    