{
  "ver": "1.0.27",
  "uuid": "c7a4e012-e2ae-46e3-8000-3c6e0c595e31",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat circle(in vec2 uv, in float radius){\n  return 1.0 - smoothstep(radius-0.01*radius, radius+0.01*radius, length(uv));\n}\nvoid main () {\n  vec4 o = vec4(0, 0, 0, 0);\n  #if USE_TEXTURE\n    vec2 uv = v_uv0 - 0.5;\n    float itemRadius = 0.05;\n    const float count = 12.0;\n    float radius = 0.35;\n    float rotation = 0.0;\n    float time = cc_time.x;\n    float realItemRadius = 0.0;\n    vec2 pos = vec2(0,0);\n    for( float i = 0.0 ; i < count ; i++){\n      rotation = 6.28318530718 * i / count + time * 6.28318530718 / 4.0;\n      pos = vec2(radius * cos(rotation),radius * sin(rotation));\n      realItemRadius = itemRadius * (sin(rotation*0.45)+1.0)/3.0 + itemRadius/3.0;\n      o.a += circle(uv - pos,realItemRadius);\n      o.r += o.a * (sin(i/count + time + 3.14159265359*6.0/3.0)+ 1.0)/2.0;\n      o.g += o.a * (sin(i/count + time + 3.14159265359*4.0/3.0)+1.0)/2.0;\n      o.b += o.a * (sin(i/count + time + 3.14159265359*2.0/3.0)+1.0)/2.0;\n    }\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat circle(in vec2 uv, in float radius){\n  return 1.0 - smoothstep(radius-0.01*radius, radius+0.01*radius, length(uv));\n}\nvoid main () {\n  vec4 o = vec4(0, 0, 0, 0);\n  #if USE_TEXTURE\n    vec2 uv = v_uv0 - 0.5;\n    float itemRadius = 0.05;\n    const float count = 12.0;\n    float radius = 0.35;\n    float rotation = 0.0;\n    float time = cc_time.x;\n    float realItemRadius = 0.0;\n    vec2 pos = vec2(0,0);\n    for( float i = 0.0 ; i < count ; i++){\n      rotation = 6.28318530718 * i / count + time * 6.28318530718 / 4.0;\n      pos = vec2(radius * cos(rotation),radius * sin(rotation));\n      realItemRadius = itemRadius * (sin(rotation*0.45)+1.0)/3.0 + itemRadius/3.0;\n      o.a += circle(uv - pos,realItemRadius);\n      o.r += o.a * (sin(i/count + time + 3.14159265359*6.0/3.0)+ 1.0)/2.0;\n      o.g += o.a * (sin(i/count + time + 3.14159265359*4.0/3.0)+1.0)/2.0;\n      o.b += o.a * (sin(i/count + time + 3.14159265359*2.0/3.0)+1.0)/2.0;\n    }\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}